<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smilesoul</title>
  <subtitle>Smilesoul Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://smilesoul.cn/"/>
  <updated>2017-08-07T13:05:11.000Z</updated>
  <id>http://smilesoul.cn/</id>
  
  <author>
    <name>Smilesoul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端构建工具介绍</title>
    <link href="http://smilesoul.cn/2017/08/07/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://smilesoul.cn/2017/08/07/前端构建工具介绍/</id>
    <published>2017-08-07T11:50:25.000Z</published>
    <updated>2017-08-07T13:05:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Grunt-and-Gulp-构建工具"><a href="#Grunt-and-Gulp-构建工具" class="headerlink" title="Grunt and Gulp(构建工具)"></a>Grunt and Gulp(构建工具)</h3><hr>
<h4 id="两者优缺点对比"><a href="#两者优缺点对比" class="headerlink" title="两者优缺点对比"></a>两者优缺点对比</h4><ol>
<li>Grunt 有一个完善的社区，插件丰富. 它简单易学。（大约4000+，将近Gulp两倍);</li>
<li>Grunt 是基于文件流，Gulp是基于管道流。</li>
<li>Grunt 的缺点<ul>
<li>但插件很难遵守单一责任原则。比如说要对处理后的文件进行更名操作，你可能使用的是 uglify 插件，也有可能使用的是 concat 插件（取决于工作流的最后一个环节是谁）。对很多人来说 Grunt 插件多少存在“职责不明”和“越俎代庖”的情况。在个人看来，这也是 Grunt 一个设计思想：把对文件的操作抽象为一个独立的组（Files），任何插件都以相同的规则来使用它。遗憾在于，使用它的过程发生在每个插件的独立配置对象里，所以总给人一种“把不该这个插件做的事情丢给它来做”的别扭感觉。</li>
<li>用插件做一些本来不需要插件来做的事情。因为 Grunt 提供了统一的 CLI 入口，子任务由插件定义，由 CLI 命令来调用执行，因此哪怕是很简单的外部命令（比如说运行 karma start）都得有一个插件来负责封装它，然后再变成 Grunt CLI 命令的参数来运行，多此一举。</li>
<li>试图用配置文件完成所有事，结果就是混乱不堪。规模较大，构建／分发／部署流程较为复杂的项目，其 Gruntfile有多庞杂相信有经历的人都有所体会。而 gulp.js 奉行的是“写程序而不是写配置”。 </li>
<li>落后的流程控制产生了让人头痛的临时文件／文件夹所导致的性能滞后。</li>
</ul>
</li>
</ol>
<p>Gruntfile.js范例<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt) &#123;</div><div class="line">    grunt.initConfig(&#123;</div><div class="line">        concat: &#123;</div><div class="line">            <span class="string">'dist/all.js'</span>: [<span class="string">'src/*.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        uglify: &#123;</div><div class="line">            <span class="string">'dist/all.min.js'</span>: [<span class="string">'dist/all.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        jshint: &#123;</div><div class="line">            files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        watch: &#123;</div><div class="line">            files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>],</div><div class="line">            tasks: [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    // Load Our Plugins</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">    // Register Default Task</div><div class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Gulpfile.js范例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line">  </div><div class="line"><span class="comment">// 语法检查</span></div><div class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 合并文件之后压缩代码</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 监视文件的变化</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/*.js'</span>, [<span class="string">'jshint'</span>, <span class="string">'minify'</span>]);</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 注册缺省任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'minify'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure></p>
<p>附录<br>Gulp插件库:z <a href="http://gulpjs.com/plugins" target="_blank" rel="external">http://gulpjs.com/plugins</a><br>Gulp API: <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a><br>Grunt API: <a href="https://gruntjs.com/api/grunt" target="_blank" rel="external">https://gruntjs.com/api/grunt</a></p>
<h3 id="Browserify-and-Webpack-模块化工具"><a href="#Browserify-and-Webpack-模块化工具" class="headerlink" title="Browserify and Webpack(模块化工具)"></a>Browserify and Webpack(模块化工具)</h3><ol>
<li>seajs / require : 是一种在线”编译” 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module , 也就实现了模块化。</li>
<li>browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。以webpack为例。首先它是预编译的，不需要在浏览器中加载解释器。Browserify与WebPack的功能类似；它也是基于文件流的，相较于WebPack，Browserify能够对处理过程做更精细的控制，而WebPack相对更加‘黑盒’。还有就是WebPack的生态要比Browserify好得多。</li>
</ol>
<h3 id="Npm-yarn-bower"><a href="#Npm-yarn-bower" class="headerlink" title="Npm, yarn, bower"></a>Npm, yarn, bower</h3><ol>
<li>npm安装依赖包的时候，会将包的不同版本放在合适的地方，从而，可以在想要的地方加载想要的版本。但是，这样对于前端来说，就是噩梦了(比如有两个版本的jQuery，或者两个版本的Bootstrap)。</li>
<li>npm是为JavaScript服务的包管理器，目前的仓库中大多数都是Node.js包，使用Browserify进行适配之后，某些模块可以在客户端运行，但还有很多仍然不行。</li>
<li>npm会创建一个树形的依赖关系，而bower创建的是扁平化的层级依赖关系。</li>
<li>树形的依赖关系的意思就是每一个包都可以有他自己的依赖包。在服务器上，这样做很好，并不用太关心空间不够用什么的。但是，在前端，这样就显得很不友好了，想象一下一个网站同时加载了三个不同版本的jQuery。</li>
<li>bower安装的目录结构是扁平的。相互依赖的包会被放到同一级目录下。由于目录扁平化，所以，发生版本冲突的时候，需要人工解决。这样，任何人得到这个项目，安装的包的版本都是相同的了。</li>
</ol>
<h3 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h3><p>1.Yeoman 是一个通用的脚手架系统允许创建任何的 app 。它可以迅速的搭建一个新项目，并且能够简化了现有项目的维护。</p>
<p>附录<br>创建Yeoman: <a href="http://www.yowebapp.com/authoring/index.html" target="_blank" rel="external">http://www.yowebapp.com/authoring/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Grunt-and-Gulp-构建工具&quot;&gt;&lt;a href=&quot;#Grunt-and-Gulp-构建工具&quot; class=&quot;headerlink&quot; title=&quot;Grunt and Gulp(构建工具)&quot;&gt;&lt;/a&gt;Grunt and Gulp(构建工具)&lt;/h3&gt;&lt;hr
    
    </summary>
    
      <category term="前端构建" scheme="http://smilesoul.cn/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="framework" scheme="http://smilesoul.cn/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>Yeoman使用和编写</title>
    <link href="http://smilesoul.cn/2017/08/04/Yeoman%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BC%96%E5%86%99/"/>
    <id>http://smilesoul.cn/2017/08/04/Yeoman使用和编写/</id>
    <published>2017-08-04T01:17:05.000Z</published>
    <updated>2017-08-04T01:17:28.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原型函数Construction解析</title>
    <link href="http://smilesoul.cn/2016/07/06/JavaScript-constructor/"/>
    <id>http://smilesoul.cn/2016/07/06/JavaScript-constructor/</id>
    <published>2016-07-06T12:54:16.000Z</published>
    <updated>2017-08-04T01:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解原型之间的关系"><a href="#理解原型之间的关系" class="headerlink" title="理解原型之间的关系"></a>理解原型之间的关系</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">testOne() &#123;&#125;;</div><div class="line">testOne.prototype</div><div class="line"><span class="comment">// Object &#123;</span></div><div class="line"><span class="symbol">        constructor:</span> a()</div><div class="line"><span class="symbol">                arguments:</span> null</div><div class="line"><span class="symbol">                caller:</span> null</div><div class="line"><span class="symbol">                length:</span> <span class="number">0</span></div><div class="line"><span class="symbol">                name:</span><span class="string">"a"</span></div><div class="line"><span class="symbol">                prototype:</span> Object</div><div class="line"><span class="symbol">                __proto__:</span> ()</div><div class="line">                <span class="params">&lt;function scope&gt;</span></div><div class="line">                <span class="comment">//注意层级关系</span></div><div class="line"><span class="symbol">        __proto__:</span> Object</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">testOne.length</div><div class="line"><span class="comment">// output: 0</span></div><div class="line"></div><div class="line"></div><div class="line">testOne.prototype.name = <span class="string">'2'</span>;</div><div class="line">testOne.name</div><div class="line"><span class="comment">// output: 'a';</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>: 这里输出为’a’，而不是２，它会去查constructor里面的name，因为prototype.constructor是会指回testOne，如果要获取＇２＇，只能testOne.prototype.name来获取.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> testTwo = <span class="keyword">new</span> testOne();</div><div class="line">testTwo.prototype</div><div class="line"><span class="comment">//output: undefined</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>: 每创建一个函数才会创建它的prototype对象，使用new，不会创建prototype对象</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">testTwo.constructor</span></div><div class="line"><span class="string">//output:</span> <span class="string">testOne()&#123;&#125;</span></div><div class="line"></div><div class="line"><span class="string">testTwo.constructor.name</span> <span class="string">=</span> <span class="string">'b'</span><span class="string">;</span></div><div class="line"><span class="string">testTwo.name</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">testTwo</span></div><div class="line"></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(ｔｅｓｔTwo,</span> <span class="string">'name'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;value:</span> <span class="string">"testTwo"</span><span class="string">,</span> <span class="attr">writable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>所有原声的只可以delete，之后testOne.name输出为＇＇，不能修改.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">testTwo.constructor.names</span> <span class="string">=</span> <span class="string">'c'</span><span class="string">;</span></div><div class="line"><span class="string">testTwo.names</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">c</span></div><div class="line"></div><div class="line"><span class="string">Object,getOwnPropertyDescriptor(testTwo,</span> <span class="string">'names'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;value:</span> <span class="string">"c"</span><span class="string">,</span> <span class="attr">writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>非原生的属性，添加之后可以修改,所以在执行new操作时，将tetTwo的指针指向了testTwo.constructor</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">testOne.prototype.newOne = <span class="string">'5'</span>;</div><div class="line">testTwo.newOne</div><div class="line"><span class="comment">// output: '5'</span></div><div class="line">testTwo.newOne = <span class="string">'6'</span>;</div><div class="line">testTwo.newOne</div><div class="line"><span class="comment">// output: '6'</span></div><div class="line">testTwo</div><div class="line"><span class="comment">// output: </span></div><div class="line"><span class="symbol">    bbb:</span><span class="string">"444"</span></div><div class="line"><span class="symbol">    __proto__:</span>	Object</div><div class="line"><span class="symbol">        bbb:</span> <span class="string">"2"</span></div><div class="line"><span class="symbol">        constructor:</span> d()</div><div class="line">        ＿_proto__: Object</div></pre></td></tr></table></figure>
<p>newOne　屏蔽掉了原属性，因为将怎么testOne的指针指＿proto＿</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object.keys(testTwo);</div><div class="line"><span class="regexp">//</span> output: [<span class="string">'bbb'</span>]</div></pre></td></tr></table></figure>
<p>这也是为什么Object.keys只出现bbb，因为＿proto＿，constructor不可枚举.</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">name</span>()<span class="comment">&#123;&#125;</span>;</div><div class="line"><span class="keyword">name</span>.prototype;</div><div class="line"><span class="comment">// output: constructor: name()</span></div><div class="line">            __proto__:<span class="keyword">Object</span>               </div><div class="line"><span class="keyword">const</span> nameTwo()<span class="comment">&#123;&#125;</span>;</div><div class="line">nameTwo.prototype = <span class="comment">&#123;&#125;</span>;</div><div class="line">nameTwo.prototype;</div><div class="line"><span class="comment">// output: __proto__:Object</span></div></pre></td></tr></table></figure>
<p>这也切断了与原型之间的联系，constructor变成了＿ｐｒｏｔｏ＿的属性</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">const</span> <span class="string">nameThree()&#123;&#125;;</span></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(nameThree.prototype,</span> <span class="string">'constructor'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;</span> <span class="attr">writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span> <span class="string">&#125;</span></div><div class="line"><span class="string">nameThree.prototype</span> <span class="string">=</span> <span class="string">&#123;</span> <span class="attr">constructor:</span> <span class="string">nameThree&#125;;</span></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(nameThree.prototype,</span> <span class="string">'constructor'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>操作prototype会使，constructor消失，如果手动改变，这会使constructor种的enumerable变成true（即可枚举）    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解原型之间的关系&quot;&gt;&lt;a href=&quot;#理解原型之间的关系&quot; class=&quot;headerlink&quot; title=&quot;理解原型之间的关系&quot;&gt;&lt;/a&gt;理解原型之间的关系&lt;/h3&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
